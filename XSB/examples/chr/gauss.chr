%% Ported to hProlog by Tom Schrijvers, tom.schrijvers@cs.kuleuven.ac.be
%%
%% $Id: gauss.chr,v 1.4 2010-08-19 15:03:38 spyrosh Exp $

%% Example usage:
%%
%%	?- [gauss].
%%	?- X + Y #= 1, X - Y #= 1, label.
%%	
%%	Y = -0.00000000000000000e+00
%%	X = 1.00000000000000000e+00
%%	Yes
%%	?- X + Y #= 1, X - Y #= 0, label.
%%	
%%	Y = X = 5.00000000000000000e-01
%%	Yes
%%

%% solving linear polynomial equations by variable elimination a la Gauss
%% thom fruehwirth 910610,911213,920124,930602,931223, 980311
%% 961107 christian holzbaur for SICStus CHR 
%% complete for equalities, leaves equalities implicit, slow
%% may loop if variables of the equations are unified

:- chr_module(gauss).

:- export (#=)/2, label/0.

:- import
	ground/1,
	length/2
   from basics.

:- import
	call/1
   from standard.

:- import
	globalize/1,
	var_compare/3
   from ordering.

?- op(700,xfx,#=).

%% math-utilities.pl ===========================================================
%% auxiliary predicates for math*.pl constraint solvers
%% thom fruehwirth 1991-92, revised 930518,931223,940304
%% 961030 christian holzbaur, SICStus adaption

%% SETTINGS --------------------------------------------------------------------

:- op(100,xfx,equals).

%% with float_precision single or double
%% adapt precision for zero/1 test
%% :- ( current_module(eclipse) -> 
%% 	 get_flag(float_precision,G)
%%    ; 
%% 	 G = double
%%    ),
%% ( G==single -> setval(precision,1.0e-06),setval(mprecision,-1.0e-06)
%% ; 
%%   G==double -> setval(precision,1.0e-12),setval(mprecision,-1.0e-12)
%% ).
getval(precision,1.0e-06).
getval(mprecision,-1.0e-06).


%% 
%% 
%% AUXILIARY PREDICATES -------------------------------------------------------

%%
%% sort X*K,slack(_)*K with globalized Xs
%%
sort1(A,B):-
	msort(A,C),
	( (C=[X*_|_],nonvar(X),X=slack(_))->A=B;B=C). % slacks unordered why?

msort( L, S) :-
	length( L, Len),
	msort( Len, L, [], S).

msort( 0, L,     L, []) :- ! .
msort( 1, [X|L], L, [X]) :- ! .
msort( N, L0, L2, S) :-
	P is N>>1,
	Q is N-P,
	msort( P, L0, L1, Sp),
	msort( Q, L1, L2, Sq),
	gmerge( Sp, Sq, S).

gmerge( [], B, B) :- ! .
gmerge( A, [], A) :- ! .
gmerge( [A|As], [B|Bs], Res) :-
	cmp( R, A, B),
	gmerge( R, A, As, B, Bs, Res).

gmerge( =, A, As, _, Bs, [A|Rest]) :- gmerge( As, Bs,     Rest).
gmerge( <, A, As, B, Bs, [A|Rest]) :- gmerge( As, [B|Bs], Rest).
gmerge( >, A, As, B, Bs, [B|Rest]) :- gmerge( [A|As], Bs, Rest).

cmp( R, X, Y) :- var(X), var(Y), !, var_compare( R, X, Y) .
cmp( R, X, _) :- var(X), !, R = (<).
cmp( R, _, Y) :- var(Y), !, R = (>).
cmp( R, X, Y) :-
	functor( X, Fx, Ax),
	functor( Y, Fy, Ay),
	compare( Rr, Ax/Fx, Ay/Fy),
	( Rr = (=),
	  Ax > 0 ->
	  cmp_args( 1,Ax, X, Y, R)
	; 
	  R = Rr
	).

cmp_args( N,M, _, _, R) :- N>M, !, R = (=).
cmp_args( N,M, X, Y, R) :-
	arg( N, X, Ax),
	arg( N, Y, Ay),
	cmp( Rr, Ax, Ay),
	( Rr = (=) ->
	  N1 is N+1,
	  cmp_args( N1,M, X, Y, R)
	; 
	  R = Rr
	).


rev([],L,L).
rev([X|L1],L2,L3):- rev(L1,[X|L2],L3).

gdelete( X, [X|L],  L).
gdelete( Y, [X|Xs], [X|Xt]) :-
	gdelete( Y, Xs, Xt).

zero(X) :- nonvar(X), X = slack(S), !, zero( S).
zero(C):-    
    float(C) -> 
	getval(precision,P),
	getval(mprecision,MP),
	MP < C,						% cope with imprecision
	C < P      
    ;		   
	C=:=0.

unwrap(X,Y) :-
	(  nonvar(X), X = slack(Y) ->
		true
	;
		X = Y
	).

is_div( C1, C2, C3) :-
	unwrap( C1, C11),
	unwrap( C2, C21),
	unwrap( C3, C31),
	is_divu( C11, C21, C31).

is_divu(C1,C2,C3):- zero(C1),!,C3=0.
is_divu(C1,C2,C3):- X is -(C1/C2), % minus here to get sign needed in handlers
	avoid_float(X,C3).

avoid_float(X,C3):-
	float(X) -> Y is round(X),Z is X-Y,(zero(Z)-> C3 is floor(Y);C3=X) ; C3=X.


%% HANDLING SLACK VARIABLES ----------------------------------------------------

%% COMPUTING WITH POLYNOMIALS -------------------------------------------------

%% gets rounded constant C from is_div/3
mult_const(eq0(C1,P1),C,eq0(0 ,[])):- C=:=0,! .
mult_const(eq0(C1,P1),C,eq0(C1,P1)):- C=:=1,! .
mult_const(eq0(C1,P1),C2,eq0(C,P)):-
	( zero(C1) -> C=0 ; C is C1*C2),
	mult_const1(P1,C2,P).
mult_const1([],C,[]).
mult_const1([Xi*Ci|Poly],C,PolyR):-
	( zero(Ci) -> PolyR=NPoly ; NCi is Ci*C,PolyR=[Xi*NCi|NPoly]),
	mult_const1(Poly,C,NPoly).

%% gets input from const_mult/3
add_eq0(eq0(C1,P1),eq0(C2,P2),eq0(C,P0)):-
	Ci is C1+C2,
	( zero(Ci) -> C=0 ; C=Ci),
	add_eq1(P1,P2,P0).
%%       sort(P,P0).
add_eq1([],Poly,Poly):- ! .
add_eq1(Poly,[],Poly):- ! .
add_eq1([Xi1*Ci1|Poly1],Poly21,Poly):-
	gdelete(Xi2*Ci2,Poly21,Poly2),Xi2==Xi1,
	!,
	Ci is Ci1+Ci2,
	( zero(Ci) -> Poly=Poly3 ; Poly=[Xi1*Ci|Poly3]),
	add_eq1(Poly1,Poly2,Poly3).
add_eq1([Xi1*Ci1|Poly1],Poly2,[Xi1*Ci1|Poly3]):-
	add_eq1(Poly1,Poly2,Poly3).



normalize(A,B,P2,C1):-
	normalize1(A-B,P),
	P=eq0(C1,P1),rev(P1,[],P1R), globalize(P1R),
	sort1(P1,P2).                                 

normalize1(V,P) :- var(V),!,
P=eq0(0,[V*1]).
normalize1(C,P) :- ground(C),!,
call(C1 is C), P=eq0(C1,[]).
normalize1(slack(V),P) :- !,
P=eq0(0,[slack(V)*1]).
normalize1((+E),P) :- !,
normalize1(E,P).
normalize1((-E),P) :- !,
normalize1(E,P1),
mult_const(P1,(-1),P).
normalize1(A*B,C) :- ground(A),!,
normalize1(B,BN),
mult_const(BN,A,C).
normalize1(B*A,C) :- ground(A),!,
normalize1(B,BN),
mult_const(BN,A,C).
normalize1(B/A,C) :- ground(A),!,
normalize1(B,BN),
call(A1 is 1/A),
mult_const(BN,A1,C). 
normalize1(A-B,C) :- !,
normalize1(A,AN),
normalize1((-B),BN),
add_eq0(AN,BN,C).
normalize1(A+B,C) :- !,
normalize1(A,AN),
normalize1(B,BN),
add_eq0(AN,BN,C).
%% normalize1(E,C) :-
%% C=eq0(0,[CX*1]),
%% eqnonlin(CX,E).					% add a nonlinear equation constraint


%% end of file math-utilities.pl -----------------------------------------------

:- constraints (equals)/2.
%% Poly equals Const, where Poly is list of monomials Variable*Coefficient 

eliminate(X) @ [X*Coeff1|P1] equals C1 \ P equals C2 
	<=> gdelete(X*Coeff2,P,P2) | is_div(Coeff2,Coeff1,C), mult_const(eq0(C1,P1),C,eq0(C1C,P1C)), add_eq0(eq0(C2,P2),eq0(C1C,P1C),eq0(C3,P3)), P3 equals C3.


:- constraints (#=)/2.    
%% curly brackets as wrapper to avoid name clash with built-in =:=

%% split @ f( (C, Cs)) <=> f( C ), f( Cs ).

normalize @ '#='(A,B) <=> 
	normalize(A,B,Poly,Const), 
	Poly equals Const.   	

:- constraints label/0.

label \ equals([V * C], N) # ID <=> var(V), number(C), number(N) | V is -N / C pragma passive(ID).
label \ equals([],N) # ID <=> N =:= 0 pragma passive(ID).
label <=> true.

/* end of file gauss.chr ------------------------------------------------*/
                 
