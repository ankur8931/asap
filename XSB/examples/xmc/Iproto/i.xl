%%% i.xl --- XL code for i-protocol

%% Author: Yifei Dong

%% ----------------------------------------------------------------------
%% system configuration
{*
config(WS,Fix) :-
	retractall(window_size(_)),
	retractall(seq(_)),
	retractall(fixed(_)),
	S is 2*WS,
	assert(window_size(WS)),
	assert(seq(S)),
	assert(fixed(Fix)).
*}

%% ----------------------------------------------------------------------
%%	The system

iproto(WinSize, Fix) ::=
	config(WinSize, Fix) ;
	imain.

imain ::=
	  sender(RLout, LRin, s(1,0))
	| medium(LRin, LRout)
	| medium(RLin, RLout)
	| receiver(LRout, RLin, r(1,0,0,0,0,0)).

{*
:- datatype boolean.
boolean(true).
boolean(false).

:- datatype packettype.
packettype(type_DATA).
packettype(type_ACK).
packettype(type_NAK).
*}

%% ----------------------------------------------------------------------
%%	The data channel
%% ----------------------------------------------------------------------
medium(In, Out) ::=
	In ? X;
	{
	    Out ! recvpak(true, true, X)
	#   action(drop)
	#   action(corrupt);
	    {	Out ! recvpak(true, false, X)
	    #	Out ! recvpak(false, false, X)
	    #	Out ! recvpak(false, true, X)
	    }
	};
	medium(In, Out).


%% ----------------------------------------------------------------------
%%	The sender
%%
%%	SendState == s(SendSeq, Rack) 
%%	Packet = packet(PakType, Seq, Ack)
%%
%%	Sender's active window = open(Rack, SendSeq).
%%	Receiver's active window = upper_closed(RecSeq, Lack).
%% ----------------------------------------------------------------------

sender(In, Out, Old) ::=
	{   s_sendmsg(In, Out, Old, New)
	#   s_getpkt(In, Out, Old, New)
	#   action(progress); s_timeout(In, Out, Old, New)
	};
	sender(In, Out, New).

s_sendmsg(In, Out, Old, New) ::=
	action(user_send);
	s_sendmsg_while1(In, Out, Old, Mid);
	Mid = s(SendSeq, Rack);
	Out ! packet(type_DATA, SendSeq, /* RecSeq */ 0);
	eval(NextSend := SendSeq+1);
	New = s(NextSend, Rack).

s_sendmsg_while1(In, Out, Old, New) ::=
	Old = s(SendSeq, Rack);
	if (eval(SendSeq-Rack > window_size) \/ SendSeq == Rack)
	    then {
		{ s_getpkt(In, Out, Old, Mid)
		# action(timeout); s_timeout(In, Out, Old, Mid)
		};
		s_sendmsg_while1(In, Out, Mid, New)
	    }
	    else New = Old.

s_getpkt(In, Out, Old, New) ::=
	In ? RecvPak;
	RecvPak = recvpak(Hck, _Dck, Pak);
	if Hck == true
	    then {
		Pak = packet(PakType, _Seq, Ack);
		s_handle_ack(Ack, Old, Mid);
		if PakType == type_NAK
		    then s_handle_nak(Out, Mid, New, Pak)
		    else New = Mid
	    }
	    else New = Old.

{*
s_handle_ack(Ack, Old, New) :-
	Old = s(SendSeq, Rack),
	(in_interval(Ack, open(SendSeq, Rack))
		-> New = s(SendSeq, /* Rack = */ Ack)
		;  New = Old
	).
*}

s_handle_nak(Out, Old, Old, Pak) ::=
	Pak = packet(_PakType, Seq, _Ack);
	Old = s(SendSeq, Rack);
	if in_interval(Seq, open(SendSeq, Rack))
	    then Out ! packet(type_DATA, Seq, /* RecSeq */ 0).

s_timeout(In, Out, Old, New) ::=
	Old = s(SendSeq, Rack);
	{
	    s_getpkt(In, Out, Old, New)
	#
	    {
		Out ! packet(type_NAK, /* PakSeq */ 1, /* RecSeq */ 0);
		if (not(eval(SendSeq == (Rack+1))))
		    then {
			eval(PakSeq1 := Rack + 1);
			Out ! packet(type_DATA, PakSeq1, /* RecSeq */ 0)
		    };
		New = Old
	    }
	}.

%% ----------------------------------------------------------------------
%%	The receiver
%%
%%	State == r(SendSeq, RecSeq, Lack, Rack, Nakd, RecBuf) 
%%	Packet = packet(PakType, Seq, Ack)
%%
%%	Receiver's active window = upper_closed(RecSeq, Lack).
%% ----------------------------------------------------------------------

receiver(In, Out, Old) ::=
	{
	    r_getpkt(In, Out, Old, New)
	#   action(progress); r_timeout(In, Out, Old, New)
	};
	receiver(In, Out, New).

r_getpkt(In, Out, Old, New) ::=
	In ? RecvPak;
	RecvPak = recvpak(Hck, Dck, Pak);
	if Hck == true
	    then {
		Pak = packet(PakType, _Seq, _Ack);
		if PakType == type_DATA
		    then r_handle_data(Out, Old, New, Pak, Dck)
		    else 
			if PakType == type_NAK
			    then r_handle_nak(Out, Old, New, Pak)
			    else New = Old
		}
	    else New = Old.

r_handle_data(Out, Old, New, Pak, Dck) ::=
	Old = r(_SendSeq, _RecSeq, Lack, _Rack, _Nakd, _RecBuf);
	Pak = packet(_PakType, Seq, _Ack);
	if (not(eval(Seq-Lack > window_size)) /\ Seq \== Lack)
	    then r_handle_data_correct(Out, Old, New, Pak, Dck)
	    else New = Old.

r_handle_data_correct(Out, Old, New, Pak, Dck) ::= 
	Old = r(SendSeq, RecSeq, Lack, Rack, Nakd, RecBuf);
	Pak = packet(_PakType, Seq, _Ack);
	if Dck == true
	    then {
		remove_from_set(Seq, Nakd, MidNakd);
		Mid = r(SendSeq, RecSeq, Lack, Rack, MidNakd, RecBuf);
		if eval(Seq == RecSeq + 1)
		    then r_handle_data_expected_seqno(Out, Mid, New, Pak)
		    else r_handle_data_unexpected_seqno(Out, Mid, New, Pak)
	    }
	    else  % Dck == false
		if (Seq \== RecSeq \/ 
		       in_set(Seq, RecBuf) \/
		       in_set(Seq, Nakd))
		    then {
			Out ! packet(type_NAK, Seq, RecSeq);
			add_to_set(Seq, Nakd, NewNakd);
			New = r(SendSeq, RecSeq, RecSeq, Rack, NewNakd, RecBuf)
		    }
		    else New = Old.

r_handle_data_expected_seqno(Out, Old, New, Pak) ::= 
	Old = r(SendSeq, RecSeq, Lack, Rack, Nakd, RecBuf);
	Pak = packet(_PakType, _Seq, _Ack);
	eval(MidRecSeq := RecSeq + 1);
	action(user_recv);
	eval(Tmp := MidRecSeq + 1);
	r_supply_to_user(Out, Tmp, MidRecSeq, RecBuf, NewRecSeq, NewRecBuf);
	if eval((NewRecSeq-Lack) >= window_size//2)
	    then {
		Out ! packet(type_ACK, NewRecSeq, NewRecSeq);
		NewLack = NewRecSeq
	    }
	    else NewLack = Lack;
	New = r(SendSeq, NewRecSeq, NewLack, Rack, Nakd, NewRecBuf).


r_supply_to_user(Out, Tmp, RecSeq, RecBuf, NewRecSeq, NewRecBuf)  ::=
	if in_set(Tmp, RecBuf)
	    then {
		action(user_recv);
		remove_from_set(Tmp, RecBuf, MidRecBuf);
		eval(Next := Tmp + 1);
		r_supply_to_user(Out, Next, Tmp, MidRecBuf,
					   NewRecSeq, NewRecBuf)
	    }
	    else {NewRecBuf = RecBuf; NewRecSeq = RecSeq}.

r_handle_data_unexpected_seqno(Out, Old, New, Pak) ::=
	Old = r(SendSeq, RecSeq, Lack, Rack, Nakd, RecBuf);
	Pak = packet(_PakType, Seq, _Ack);
	if (Seq \== RecSeq /\ not(in_set(Seq, RecBuf)))
	    then {
		add_to_set(Seq, RecBuf, NewRecBuf);
		eval(Tmp := RecSeq + 1);
		r_send_naks(Out, Tmp, Seq, RecSeq, Nakd,
			    NewRecBuf, Lack, NewNakd, NewLack);
		New = r(SendSeq, RecSeq, NewLack, Rack, NewNakd, NewRecBuf)
	    }
	    else New = Old.

r_send_naks(Out, Tmp, Seq, RecSeq, Nakd, RecBuf, Lack, NewNakd, NewLack) ::=
	if (Tmp \== Seq)
	    then {
		if (not(in_set(Tmp, Nakd)) /\ not(in_set(Tmp, RecBuf)))
		    then {
			Out ! packet(type_NAK, Tmp, RecSeq);
			add_to_set(Tmp, Nakd, MidNakd);
			MidLack = RecSeq
		    }
		    else {MidNakd = Nakd; MidLack = Lack};
		eval(Next := Tmp + 1);
		r_send_naks(Out, Next, Seq, RecSeq, MidNakd, RecBuf,
			          MidLack, NewNakd, NewLack)
	    }
	    else {NewNakd = Nakd; NewLack = Lack}.


{*
r_handle_ack(Ack, Old, New) :-
	Old = r(SendSeq, RecSeq, Lack, Rack, Nakd, RecBuf),
	(in_interval(Ack, open(SendSeq, Rack))
		-> New = r(SendSeq, RecSeq, Lack, /* Rack = */ Ack, 
				Nakd, RecBuf)
		;  New = Old
	).
*}

r_handle_nak(Out, Old, New, Pak) ::=
	if fixed(fix)
	    then {
		Pak = packet(_PakType, _Seq, _Ack);
		Old = r(SendSeq, RecSeq, _Lack, Rack, Nakd, RecBuf);
		Out ! packet(type_ACK, RecSeq, RecSeq);
		New = r(SendSeq, RecSeq, RecSeq, Rack, Nakd, RecBuf)
	    }
	    else
		New = Old.

r_timeout(In, Out, Old, New) ::=
	Old = r(SendSeq, RecSeq, Lack, Rack, _Nakd, RecBuf);
	Mid = r(SendSeq, RecSeq, Lack, Rack, 0, RecBuf);
	{
	    r_getpkt(In, Out, Mid, New)
	#
	    eval(PakSeq := RecSeq + 1);
	    add_to_set(PakSeq, 0, NewNakd);
	    Out ! packet(type_NAK, PakSeq, RecSeq);
	    New = r(SendSeq, RecSeq, /* Lack = */ RecSeq, Rack,
							NewNakd, RecBuf)
	}.

%% ======================================================================
%%	The livelock property

livelock += ll2 \/ <-> livelock.
ll2 -= <{timeout,nop,tau}> ll2.

%% ======================================================================
%%	Some arithmetic

{*
:- import ground/1 from basics.

eval(X = Y)  :- !, X = Y.
eval(X == Y) :- !, eval(X, U), eval(Y, V), modulus(U, Ua), modulus(V, Va), Ua == Va.
eval(X := Y) :- !, eval(Y, U), modulus(U, X).
eval(X is Y) :- !, eval(Y, U), modulus(U, X).
eval(X > Y)  :- !, eval(X, U), eval(Y, V), modulus(U, Ua), modulus(V, Va), Ua > Va.
eval(X < Y)  :- !, eval(X, U), eval(Y, V), modulus(U, Ua), modulus(V, Va), Ua < Va.
eval(X >= Y) :- !, eval(X, U), eval(Y, V), modulus(U, Ua), modulus(V, Va), Ua >= Va.
eval(X =< Y) :- !, eval(X, U), eval(Y, V), modulus(U, Ua), modulus(V, Va), Ua =< Va.
eval(not(E)) :- !, not(eval(E)).

eval(A+B, V) :- !, eval(A, Va), eval(B, Vb), V is Va+Vb.
eval(A-B, V) :- !, eval(A, Va), eval(B, Vb), V is Va-Vb.
eval(A*B, V) :- !, eval(A, Va), eval(B, Vb), V is Va*Vb.
eval(A/B, V) :- !, eval(A, Va), eval(B, Vb), V is Va/Vb.
eval(A//B, V) :- !, eval(A, Va), eval(B, Vb), V is Va//Vb.
eval(window_size, V) :- !, window_size(V).
eval(E, V) :- V is E.

modulus(E, V) :- seq(Seq), X is E mod Seq, abs(X, V).
abs(X, V) :- ( X < 0 -> (seq(Seq), V is X+Seq) ; V = X).

%% Now, some interval stuff

in_interval(X, open(L,U)) :- 
	X \== L,
	eval((L-X) =< window_size),
	eval((X-U) =< window_size).

in_open_interval(X, L,U) :- 
	X \== L,
	eval((L-X) =< window_size),
	eval((X-U) =< window_size).

in_interval(X, upper_closed(L, U)) :-
	(L > U -> (X > L; X =< U)
		; (X > L, X =< U)).
in_interval(X, closed(L, U)) :-
	(L > U -> (X >= L; X =< U)
		; (X >= L, X =< U)).

%% Finally, some set stuff

% implement set as bit-string

in_set(Element, Set) :-
	1 is ((Set >> Element) mod 2).

add_to_set(Element, Set, NewSet) :- 
	in_set(Element, Set)
	->	NewSet = Set
	;	NewSet is Set + (1 << Element).

remove_from_set(Element, Set, NewSet) :-
	in_set(Element, Set)
	->	NewSet is Set - (1 << Element)
	;	NewSet = Set.

*}