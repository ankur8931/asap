/* File:      sgmlconfig.P -- loader for the SGML foreign module
** Author(s): Rohan Shirwaikar
** Contact:   xsb-contact@cs.sunysb.edu
** 
** Copyright (C) The Research Foundation of SUNY, 2004
** 
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** $Id: sgmlconfig.P,v 1.16 2013-05-06 21:10:26 dwarren Exp $
** 
*/


:- compiler_options([xpp_on]).
#include "extensions_xsb.h"


:- import xsb_running_under/1, force_rename_file/2 from packaging.
:- import slash/1, str_cat/3 from machine.
:- import search_module/6 from consult.
:- import path_sysop/3, path_sysop/2, fmt_write_string/3 from file_io.
:- import xsb_configuration/2 from xsb_configuration.
:- import concat_atom/2 from string.

:- ensure_loaded(curl).


'_$_make_sgmlH'(CC, CC_opts) :-
	slash(Slash),
	xsb_configuration(configuration, XSBconfiguration),
	((xsb_running_under(unix) ; xsb_running_under(darwin)) ->
	    xsb_configuration(loader_flags, LoaderFlagsBase),
	    concat_atom([LoaderFlagsBase, ' -lcurl'], LoaderFlags),
	    LD_flags = LoaderFlags
	; %% Cygwin. Under Windows this option is ignored
	    LD_flags = ' -lwsock32 '
	),

	package_configuration(dir(sgml), SgmlDir),
	fmt_write_string(LD_directives_file,
			 '%s%scc%ssgml2pl.H', f(SgmlDir, Slash, Slash)),
	telling(OldTell),
	tell(LD_directives_file),
	writeln('%% This file is generated on-the-fly by sgmlconfig.P'),
	writeln('%% Do not edit--any changes will be written over.'),
	write('%% config:    '), writeln(XSBconfiguration),
	write('%% CC:        '), writeln(CC),
	write('%% CC Opts: '), writeln(CC_opts), 
	writeln(':- export pl_new_sgml_parser/2, pl_sgml_parse/2, pl_set_sgml_parser/2, pl_open_dtd/2, pl_new_dtd/2, pl_free_sgml_parser/1, pl_free_dtd/1, pl_doctype/2, pl_allocate_error_term/2, pl_xml_quote_attribute/2, pl_xml_quote_cdata/2, pl_xml_name/1, pl_finalize_warn/1.'),
	write(':- ldoption('''),
	write(LD_flags),
	writeln(''').'),
	told,
	tell(OldTell).


:-
    package_configuration(dir(sgml), SgmlDir),  
    slash(Slash),
    Basename = sgml2pl,
    xsb_configuration(config_libdir, ConfigLibDir),
    xsb_configuration(compiler, CC),
    xsb_configuration(config_dir, ConfigDir),
    xsb_configuration(compiler_flags, CCflags),
    xsb_configuration(config_bindir, ConfigBinDir),
    fmt_write_string(Module, '%s%scc%s%s', f(SgmlDir,Slash,Slash,Basename)),
    fmt_write_string(LibObjFile,
		     '%s%s%s%s',
		     args(ConfigLibDir,Slash,Basename,XSB_OBJ_EXTENSION_ATOM)),
    fmt_write_string(Curl, '%s%s..%scurl%scc', 
				 f(SgmlDir, Slash, Slash, Slash)),
    fmt_write_string(CurlObj, '%s%s..%scurl%scc%sload_page.c', 
				 f(SgmlDir, Slash, Slash, Slash, Slash)),
    fmt_write_string(CC_opts, ' %s -I %s -I %s %s', f(CCflags, ConfigDir, Curl, CurlObj)),
    str_cat(Module, XSB_OBJ_EXTENSION_ATOM, Objfile),
    ((xsb_running_under(windows) ; xsb_running_under(cygwin)) ->
	fmt_write_string(ConfigSharedMod,
			 '%s%s%s.dll', f(ConfigBinDir, Slash, Basename))
    ; xsb_running_under(darwin) ->
	fmt_write_string(ConfigSharedMod,
			 '%s%s%s.dylib', f(ConfigLibDir, Slash, Basename))
    ;
	fmt_write_string(ConfigSharedMod,
			 '%s%s%s.so',  f(ConfigLibDir, Slash, Basename))
    ),
    (   %% avoid recompilation
	search_module(Basename,Dir,_Mod,_Ext,BaseDir,ModuleO),
	str_cat(Module, '.c', ModuleSourceFile),
	path_sysop(newerthan,ModuleO,ModuleSourceFile),
	path_sysop(newerthan,ConfigSharedMod,ModuleSourceFile)
    %% module compiled and is current, so just load
    -> consult(Basename)

    %% If Module isn't compiled or is old --- recompile
    ;
	'_$_make_sgmlH'(CC, CC_opts),
	(xsb_running_under(windows) ->
	    [Basename],
	    (path_sysop(exists,Objfile) -> force_rename_file(Objfile, LibObjFile)
	    ; true
	    )

	; xsb_running_under(cygwin) ->
	    str_cat(Module, '.dll', SharedLib),
	    consult(Module, [cc(CC), cc_opts(CC_opts)]),
	    force_rename_file(SharedLib, ConfigSharedMod),
	    force_rename_file(Objfile, LibObjFile),
	    str_cat(Module, '.o', ObjfileO),
	    fmt_write_string(LibObjFileO,
			     '%s%s%s.o', f(ConfigBinDir, Slash, Basename)),
	    force_rename_file(ObjfileO, LibObjFileO),
	    str_cat(Module, '.a', ObjfileA),
	    fmt_write_string(LibObjFileA,
			     '%s%s%s.a', f(ConfigBinDir, Slash, Basename)),
	    force_rename_file(ObjfileA, LibObjFileA),
	    str_cat(Module, '.def', ObjfileDef),
	    fmt_write_string(LibObjFileDef,
			     '%s%s%s.def', f(ConfigBinDir, Slash, Basename)),
	    force_rename_file(ObjfileDef, LibObjFileDef)

	; xsb_running_under(darwin) ->  %% MacOS
	    consult(Module, [cc(CC), cc_opts(CC_opts)]),
	    writeln(finished_consult),
	    force_rename_file(Objfile, LibObjFile),
	    writeln(renaming(Objfile,LibObjFile)),
	    str_cat(Module, '.dylib', SharedLib),
	    force_rename_file(SharedLib,ConfigSharedMod),
	    writeln(rename(SharedLib,ConfigSharedMod))
	; %% Other Unices
	    consult(Module, [cc(CC), cc_opts(CC_opts)]),
	    force_rename_file(Objfile, LibObjFile),
	    str_cat(Module, '.so', SharedLib),
	    force_rename_file(SharedLib,ConfigSharedMod)
	)
    ).

