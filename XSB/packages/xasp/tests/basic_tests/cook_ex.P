:- ensure_loaded(xasp).

:- import smcInit/0, smcAddRule/2, smcCommitProgram/0 from sm_int.
:- import smcSetCompute/1, smComputeModel/0, smcExamineModel/1, smEnd/0 
					from sm_int.
:- import thread_create/2 from thread.
:- import print_cache/0 from sm_int.

test(0):-!.
test(N):- thread_create(test,_),N1 is N - 1,test(N1).

test:- cookex_all.

cookex_all :-
	smcInit,
	smcAddRule(a,[]),
	smcAddRule(b,[]),
	smcAddRule(d,[a,not(c)]),
	smcAddRule(c,[b,not(d)]),
%	print_cache,
	smcCommitProgram,
	write('All Solutions: '),nl,
	(   smComputeModel,
	    smcExamineModel(Model),
	    write(Model),nl,
	    fail
	;
	    smEnd  ).

cookex_c :-
	smcInit,
	smcAddRule(a,[]),
	smcAddRule(b,[]),
	smcAddRule(d,[a,not(c)]),
	smcAddRule(c,[b,not(d)]),
	smcSetCompute([c]),
	smcCommitProgram,
	write('All Solutions: '),nl,
	(   smComputeModel,
	    smcExamineModel(Model),
	    write(Model),nl,
	    fail
	;
	    smEnd  ).

cookex_notc :-
	smcInit,
	smcAddRule(a,[]),
	smcAddRule(b,[]),
	smcAddRule(d,[a,not(c)]),
	smcAddRule(c,[b,not(d)]),
	smcSetCompute([not(c)]),
	smcCommitProgram,
	write('All Solutions: '),nl,
	(   smComputeModel,
	    smcExamineModel(Model),
	    write(Model),nl,
	    fail
	;
	    smEnd  ).

end_of_file.


